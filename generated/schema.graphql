schema {
  mutation: JetPluginMutation
  query: JetPluginQuery
}

type JetPluginManifest {
  description: String
  version: String!
  capabilities: [JetPluginCapability!]
}

interface JetPluginCapability {
  enable: Boolean!
}

type JetPluginCapabilityDatabase implements JetPluginCapability {
  enable: Boolean!
}

interface JetPluginCallbackResponse {
  message: String

  "Arbitrary serialized JSON data."
  extensions: String
}

type JetPluginCallbackResponseOk implements JetPluginCallbackResponse {
  message: String
  extensions: String
}

"""
Issued when an argument of unexpected format is received.
For example, a field `email` of type `string` expected an email
address is filled out with a malformed string like `"foobar"`.
"""
type JetPluginCallbackResponseArgumentError implements JetPluginCallbackResponse {
  message: String
  extensions: String
  invalidArgument: String!
  expected: String!
}

type JetPluginQuery {
  jetPluginHealthCheck: JetPluginCallbackResponse
}

type JetPluginMutation {
  """
  Called when the plugin is discovered by Jet. The plugin should respond
  immediately with plugin info and calls Jet's `plugin_initialized` api
  to finish initialization.
  """
  jetPluginInitialize(
    jetApiEndpoint: String!

    """
    All calls to Jet's APIs require this access_key. So it should be
    persisted to local storage of the plugin.
    """
    accessKey: String!
  ): JetPluginManifest

  "Called when the plugin is enabled by a project."
  jetPluginEnable(projectId: String!, envId: String!, instanceId: String!, config: JetPluginEnableConfig!): JetPluginCallbackResponse

  "Called when the plugin is disabled by a project."
  jetPluginDisable(projectId: String!, envId: String!, instanceId: String!): JetPluginCallbackResponse
}

input JetPluginEnableConfig {
  value: String
}
