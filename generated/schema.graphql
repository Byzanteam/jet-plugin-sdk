schema {
  mutation: RootMutationType
  query: RootQueryType
}

type JetPluginManifest {
  apiEndpoint: String
  description: String
  version: String!
  capabilities: [JetPluginCapability!]
}

interface JetPluginCapability {
  enable: Boolean!
}

type JetPluginCapabilityDatabase implements JetPluginCapability {
  enable: Boolean!
}

interface JetPluginCallbackResponse {
  message: String

  "Arbitrary serialized JSON data."
  extensions: String
}

type JetPluginCallbackResponseOk implements JetPluginCallbackResponse {
  message: String
  extensions: String
}

type JetPluginCallbackResponseAsync implements JetPluginCallbackResponse {
  message: String
  extensions: String
}

"""
Issued when an argument of unexpected format is received.
For example, a field `email` of type `string` expected an email
address is filled out with a malformed string like `"foobar"`.
"""
type JetPluginCallbackResponseArgumentError implements JetPluginCallbackResponse {
  message: String
  extensions: String
  invalidArgument: String!
  expected: String!
}

union JetPluginInitializeResponse = JetPluginManifest | JetPluginCallbackResponseAsync

union JetPluginUninstallResponse = JetPluginCallbackResponseOk | JetPluginCallbackResponseAsync

type RootQueryType {
  jetPluginHealthCheck: JetPluginCallbackResponse
}

type RootMutationType {
  """
  Called when the plugin is discovered by Jet. The plugin should respond
  immediately with plugin info and calls Jet's `plugin_initialized` api
  to finish initialization.
  """
  jetPluginInitialize: JetPluginInitializeResponse

  "Called when the plugin is installed by a project."
  jetPluginInstall(projectId: String!, envId: String!, instanceId: String!, config: JetPluginConfig!): JetPluginCallbackResponse

  "Called when the plugin is updated by a project."
  jetPluginUpdate(projectId: String!, envId: String!, instanceId: String!, config: JetPluginConfig!): JetPluginCallbackResponse

  "Called when the plugin is uninstalled by a project."
  jetPluginUninstall(projectId: String!, envId: String!, instanceId: String!): JetPluginUninstallResponse
}

input JetPluginConfig {
  value: String
}
